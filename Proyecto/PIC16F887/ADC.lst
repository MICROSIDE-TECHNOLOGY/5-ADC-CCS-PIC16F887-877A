CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 14:53
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\5-ADC-CCS-PIC16F887-877A\Proyecto\PIC16F887\ADC.lst

               ROM used:   146 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... ADC.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Implementar una lectura analógica de un potenciómetro y desplegar el valor
.................... en 8 LEDs
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F887.h>                    //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #DEVICE ADC = 8                          //Configura el ADC a 8 bits
.................... #use delay( clock=20Mhz, crystal )     //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
....................  
.................... int ValorPot;                          // Variable para almacenar el valor leído del ADC
....................  
.................... void main ( void ) {
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    03.6
0009:  MOVF   09,W
000A:  ANDLW  C0
000B:  MOVWF  09
000C:  BCF    03.6
000D:  BCF    1F.4
000E:  BCF    1F.5
000F:  MOVLW  00
0010:  BSF    03.6
0011:  MOVWF  08
0012:  BCF    03.5
0013:  CLRF   07
0014:  CLRF   08
0015:  CLRF   09
0016:  BCF    03.7
....................    setup_oscillator(OSC_8MHZ);         //Configura oscilador interno
0017:  MOVLW  71
0018:  BSF    03.5
0019:  BCF    03.6
001A:  MOVWF  0F
001B:  CLRF   10
001C:  MOVF   0F,W
....................    set_tris_b ( 0x00 );                // Configura todo el puerto B como salidas digitales
001D:  MOVLW  00
001E:  MOVWF  06
....................    setup_adc_ports ( sAN0 );           // Configura solo el puerto A0 como entrada analógica
001F:  BSF    03.6
0020:  MOVF   09,W
0021:  ANDLW  C0
0022:  MOVWF  09
0023:  BCF    03.6
0024:  BCF    1F.4
0025:  BCF    1F.5
0026:  MOVLW  01
0027:  BSF    03.6
0028:  MOVWF  08
....................    setup_adc ( ADC_CLOCK_DIV_8 );      // Configura oscilador para la conversión
0029:  BCF    03.5
002A:  BCF    03.6
002B:  BSF    1F.6
002C:  BCF    1F.7
002D:  BSF    03.5
002E:  BCF    1F.7
002F:  BCF    03.5
0030:  BSF    1F.0
.................... 
....................    while (1) {
....................         set_adc_channel (0);           // Selecciona el canal 0 para la conversión
0031:  MOVLW  00
0032:  MOVWF  78
0033:  MOVF   1F,W
0034:  ANDLW  C3
0035:  IORWF  78,W
0036:  MOVWF  1F
....................         ValorPot = read_adc ();        // Lee el valor del ADC y lo guarda en la variable
0037:  BSF    1F.1
0038:  BTFSC  1F.1
0039:  GOTO   038
003A:  MOVF   1E,W
003B:  MOVWF  20
.................... 
....................         if (ValorPot <= 28) {          // Compara el valor de el ADC
003C:  MOVF   20,W
003D:  SUBLW  1C
003E:  BTFSS  03.0
003F:  GOTO   045
....................             output_b (0b00000000);     // Activa LEDs
0040:  BSF    03.5
0041:  CLRF   06
0042:  BCF    03.5
0043:  CLRF   06
....................         } else if (ValorPot <= 56)  {  
0044:  GOTO   090
0045:  MOVF   20,W
0046:  SUBLW  38
0047:  BTFSS  03.0
0048:  GOTO   04F
....................             output_b (0b00000001);     
0049:  BSF    03.5
004A:  CLRF   06
004B:  MOVLW  01
004C:  BCF    03.5
004D:  MOVWF  06
....................         } else if (ValorPot <= 84)  {  
004E:  GOTO   090
004F:  MOVF   20,W
0050:  SUBLW  54
0051:  BTFSS  03.0
0052:  GOTO   059
....................             output_b (0b00000011);     
0053:  BSF    03.5
0054:  CLRF   06
0055:  MOVLW  03
0056:  BCF    03.5
0057:  MOVWF  06
....................         } else if (ValorPot <= 112) {  
0058:  GOTO   090
0059:  MOVF   20,W
005A:  SUBLW  70
005B:  BTFSS  03.0
005C:  GOTO   063
....................             output_b (0b00000111);     
005D:  BSF    03.5
005E:  CLRF   06
005F:  MOVLW  07
0060:  BCF    03.5
0061:  MOVWF  06
....................         } else if (ValorPot <= 140) {  
0062:  GOTO   090
0063:  MOVF   20,W
0064:  SUBLW  8C
0065:  BTFSS  03.0
0066:  GOTO   06D
....................             output_b (0b00001111);     
0067:  BSF    03.5
0068:  CLRF   06
0069:  MOVLW  0F
006A:  BCF    03.5
006B:  MOVWF  06
....................         } else if (ValorPot <= 168) {  
006C:  GOTO   090
006D:  MOVF   20,W
006E:  SUBLW  A8
006F:  BTFSS  03.0
0070:  GOTO   077
....................             output_b (0b00011111);     
0071:  BSF    03.5
0072:  CLRF   06
0073:  MOVLW  1F
0074:  BCF    03.5
0075:  MOVWF  06
....................         } else if (ValorPot <= 196) {  
0076:  GOTO   090
0077:  MOVF   20,W
0078:  SUBLW  C4
0079:  BTFSS  03.0
007A:  GOTO   081
....................             output_b (0b00111111);     
007B:  BSF    03.5
007C:  CLRF   06
007D:  MOVLW  3F
007E:  BCF    03.5
007F:  MOVWF  06
....................         } else if (ValorPot <= 252) {  
0080:  GOTO   090
0081:  MOVF   20,W
0082:  SUBLW  FC
0083:  BTFSS  03.0
0084:  GOTO   08B
....................             output_b (0b01111111);     
0085:  BSF    03.5
0086:  CLRF   06
0087:  MOVLW  7F
0088:  BCF    03.5
0089:  MOVWF  06
....................         } else if (ValorPot <= 255) {  
008A:  GOTO   090
....................             output_b (0b11111111);     
008B:  BSF    03.5
008C:  CLRF   06
008D:  MOVLW  FF
008E:  BCF    03.5
008F:  MOVWF  06
....................         }
0090:  GOTO   031
....................    }
.................... }
0091:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
