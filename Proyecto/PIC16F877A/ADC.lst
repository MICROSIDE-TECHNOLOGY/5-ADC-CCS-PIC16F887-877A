CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 14:48
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\5-ADC-CCS-PIC16F887-877A\Proyecto\PIC16F877A\ADC.lst

               ROM used:   126 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... ADC.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Implementar una lectura analógica de un potenciómetro y desplegar el valor
.................... en 8 LEDs
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F877A.h>                   // Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #DEVICE ADC = 8                        // Configura el ADC a 8 bits
.................... #use delay ( clock=20Mhz, crystal )    // Tipo de oscilador y frecuencia dependiendo del microcontrolador 
.................... 
.................... int ValorPot;                          // Variable para almacenar el valor leído del ADC
.................... 
.................... void main ( void ) {
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
....................    set_tris_b ( 0x00 );                // Configura todo el puerto B como salidas digitales
000F:  MOVLW  00
0010:  MOVWF  06
....................    setup_adc_ports ( AN0 );            // Configura solo el puerto A0 como entrada analógica
0011:  BCF    1F.0
0012:  BSF    1F.1
0013:  BSF    1F.2
0014:  BSF    1F.3
....................    setup_adc ( ADC_CLOCK_DIV_8 );      // Configura oscilador para la conversión
0015:  BCF    1F.6
0016:  BCF    03.5
0017:  BSF    1F.6
0018:  BCF    1F.7
0019:  BSF    03.5
001A:  BCF    1F.7
001B:  BCF    03.5
001C:  BSF    1F.0
.................... 
....................    while (1) {
....................         set_adc_channel (0);           // Selecciona el canal 0 para la conversión
001D:  MOVLW  00
001E:  MOVWF  78
001F:  MOVF   1F,W
0020:  ANDLW  C7
0021:  IORWF  78,W
0022:  MOVWF  1F
....................         ValorPot = read_adc ();        // Lee el valor del ADC y lo guarda en la variable
0023:  BSF    1F.2
0024:  BTFSC  1F.2
0025:  GOTO   024
0026:  MOVF   1E,W
0027:  MOVWF  20
.................... 
....................         if (ValorPot <= 28) {          // Compara el valor de el ADC
0028:  MOVF   20,W
0029:  SUBLW  1C
002A:  BTFSS  03.0
002B:  GOTO   031
....................             output_b (0b00000000);     // Activa LEDs
002C:  BSF    03.5
002D:  CLRF   06
002E:  BCF    03.5
002F:  CLRF   06
....................         } else if (ValorPot <= 56)  {  
0030:  GOTO   07C
0031:  MOVF   20,W
0032:  SUBLW  38
0033:  BTFSS  03.0
0034:  GOTO   03B
....................             output_b (0b00000001);     
0035:  BSF    03.5
0036:  CLRF   06
0037:  MOVLW  01
0038:  BCF    03.5
0039:  MOVWF  06
....................         } else if (ValorPot <= 84)  {  
003A:  GOTO   07C
003B:  MOVF   20,W
003C:  SUBLW  54
003D:  BTFSS  03.0
003E:  GOTO   045
....................             output_b (0b00000011);     
003F:  BSF    03.5
0040:  CLRF   06
0041:  MOVLW  03
0042:  BCF    03.5
0043:  MOVWF  06
....................         } else if (ValorPot <= 112) {  
0044:  GOTO   07C
0045:  MOVF   20,W
0046:  SUBLW  70
0047:  BTFSS  03.0
0048:  GOTO   04F
....................             output_b (0b00000111);     
0049:  BSF    03.5
004A:  CLRF   06
004B:  MOVLW  07
004C:  BCF    03.5
004D:  MOVWF  06
....................         } else if (ValorPot <= 140) {  
004E:  GOTO   07C
004F:  MOVF   20,W
0050:  SUBLW  8C
0051:  BTFSS  03.0
0052:  GOTO   059
....................             output_b (0b00001111);     
0053:  BSF    03.5
0054:  CLRF   06
0055:  MOVLW  0F
0056:  BCF    03.5
0057:  MOVWF  06
....................         } else if (ValorPot <= 168) {  
0058:  GOTO   07C
0059:  MOVF   20,W
005A:  SUBLW  A8
005B:  BTFSS  03.0
005C:  GOTO   063
....................             output_b (0b00011111);     
005D:  BSF    03.5
005E:  CLRF   06
005F:  MOVLW  1F
0060:  BCF    03.5
0061:  MOVWF  06
....................         } else if (ValorPot <= 196) {  
0062:  GOTO   07C
0063:  MOVF   20,W
0064:  SUBLW  C4
0065:  BTFSS  03.0
0066:  GOTO   06D
....................             output_b (0b00111111);     
0067:  BSF    03.5
0068:  CLRF   06
0069:  MOVLW  3F
006A:  BCF    03.5
006B:  MOVWF  06
....................         } else if (ValorPot <= 252) {  
006C:  GOTO   07C
006D:  MOVF   20,W
006E:  SUBLW  FC
006F:  BTFSS  03.0
0070:  GOTO   077
....................             output_b (0b01111111);     
0071:  BSF    03.5
0072:  CLRF   06
0073:  MOVLW  7F
0074:  BCF    03.5
0075:  MOVWF  06
....................         } else if (ValorPot <= 255) {  
0076:  GOTO   07C
....................             output_b (0b11111111);     
0077:  BSF    03.5
0078:  CLRF   06
0079:  MOVLW  FF
007A:  BCF    03.5
007B:  MOVWF  06
....................         }
007C:  GOTO   01D
....................     }
.................... }
007D:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
